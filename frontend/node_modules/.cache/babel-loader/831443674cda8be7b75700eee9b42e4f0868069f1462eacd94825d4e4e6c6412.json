{"ast":null,"code":"// Функція для отримання балансу користувача\nconst getBalance = async address => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"quai_getBalance\",\n      params: [address, \"latest\"],\n      id: 1\n    })\n  };\n  try {\n    const response = await fetch('https://rpc.quai.network/cyprus1/', options);\n    const result = await response.json();\n    if (result.error) {\n      console.error(\"Error fetching balance:\", result.error.message);\n      return 0; // Повертає 0, якщо сталася помилка\n    }\n    const balanceInWei = parseInt(result.result); // Баланс у Wei\n    const balanceInQuai = balanceInWei / 1e18; // Перетворення в Quai\n    return balanceInQuai.toFixed(4); // Відображення з 4 знаками після коми\n  } catch (err) {\n    console.error(\"Error fetching balance:\", err);\n    return 0; // Повертає 0 при помилці\n  }\n};\n\n// Функція для підключення гаманця та відображення балансу\nconst requestAccounts = async () => {\n  try {\n    const accounts = await window.pelagus.request({\n      method: 'quai_requestAccounts'\n    });\n    if (accounts.length > 0) {\n      const balance = await getBalance(accounts[0]);\n      document.getElementById('connect-wallet').textContent = `${balance} Quai`; // Відображає баланс на кнопці\n    } else {\n      console.log('No accounts found');\n    }\n  } catch (error) {\n    if (error.code === 4001) {\n      console.log('User rejected request');\n    } else {\n      console.error(error);\n    }\n  }\n};\ndocument.getElementById('connect-wallet').addEventListener('click', requestAccounts);\n\n// Функція для відправлення транзакції\nasync function sendTransaction() {\n  const recipientAddress = \"0x000c3877DE5ae7B74b2dd8afD54B306D9c43fD80\";\n  const amountToSend = \"0.1\"; // 0.1 токена\n  const weiAmount = (parseFloat(amountToSend) * 1e18).toString(16); // Конвертуємо в wei та перетворюємо в шістнадцятковий формат\n\n  if (window.pelagus && window.pelagus.request) {\n    try {\n      const accounts = await window.pelagus.request({\n        method: 'quai_requestAccounts'\n      });\n      const transactionParameters = {\n        from: accounts[0],\n        // Адреса користувача\n        to: recipientAddress,\n        // Кінцева адреса\n        value: '0x' + weiAmount,\n        // Кількість токенів у wei\n        gasLimit: '0x5208',\n        // Ліміт газу (21000 в hex)\n        gasPrice: '0x3b9aca00' // Ціна газу в wei (1000000000)\n      };\n      const txHash = await window.pelagus.request({\n        method: 'quai_sendTransaction',\n        params: [transactionParameters]\n      });\n      console.log(\"Транзакція надіслана:\", txHash);\n      alert(\"Транзакція успішно надіслана. Хеш транзакції: \" + txHash);\n    } catch (error) {\n      console.error(\"Помилка надсилання транзакції:\", error);\n      alert(\"Транзакція не вдалася. Перевірте консоль для деталей.\");\n    }\n  } else {\n    alert(\"Гаманець Pelagus не знайдено.\");\n  }\n}","map":{"version":3,"names":["getBalance","address","options","method","headers","body","JSON","stringify","jsonrpc","params","id","response","fetch","result","json","error","console","message","balanceInWei","parseInt","balanceInQuai","toFixed","err","requestAccounts","accounts","window","pelagus","request","length","balance","document","getElementById","textContent","log","code","addEventListener","sendTransaction","recipientAddress","amountToSend","weiAmount","parseFloat","toString","transactionParameters","from","to","value","gasLimit","gasPrice","txHash","alert"],"sources":["C:/Users/nelan/OneDrive/Робочий стіл/project-root/frontend/src/App.js"],"sourcesContent":["// Функція для отримання балансу користувача\r\nconst getBalance = async (address) => {\r\n  const options = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n          jsonrpc: \"2.0\",\r\n          method: \"quai_getBalance\",\r\n          params: [address, \"latest\"],\r\n          id: 1\r\n      })\r\n  };\r\n\r\n  try {\r\n      const response = await fetch('https://rpc.quai.network/cyprus1/', options);\r\n      const result = await response.json();\r\n\r\n      if (result.error) {\r\n          console.error(\"Error fetching balance:\", result.error.message);\r\n          return 0; // Повертає 0, якщо сталася помилка\r\n      }\r\n\r\n      const balanceInWei = parseInt(result.result); // Баланс у Wei\r\n      const balanceInQuai = balanceInWei / 1e18; // Перетворення в Quai\r\n      return balanceInQuai.toFixed(4); // Відображення з 4 знаками після коми\r\n  } catch (err) {\r\n      console.error(\"Error fetching balance:\", err);\r\n      return 0; // Повертає 0 при помилці\r\n  }\r\n};\r\n\r\n// Функція для підключення гаманця та відображення балансу\r\nconst requestAccounts = async () => {\r\n  try {\r\n      const accounts = await window.pelagus.request({ method: 'quai_requestAccounts' });\r\n      if (accounts.length > 0) {\r\n          const balance = await getBalance(accounts[0]);\r\n          document.getElementById('connect-wallet').textContent = `${balance} Quai`; // Відображає баланс на кнопці\r\n      } else {\r\n          console.log('No accounts found');\r\n      }\r\n  } catch (error) {\r\n      if (error.code === 4001) {\r\n          console.log('User rejected request');\r\n      } else {\r\n          console.error(error);\r\n      }\r\n  }\r\n};\r\n\r\ndocument.getElementById('connect-wallet').addEventListener('click', requestAccounts);\r\n\r\n// Функція для відправлення транзакції\r\nasync function sendTransaction() {\r\n  const recipientAddress = \"0x000c3877DE5ae7B74b2dd8afD54B306D9c43fD80\";\r\n  const amountToSend = \"0.1\"; // 0.1 токена\r\n  const weiAmount = (parseFloat(amountToSend) * 1e18).toString(16); // Конвертуємо в wei та перетворюємо в шістнадцятковий формат\r\n\r\n  if (window.pelagus && window.pelagus.request) {\r\n      try {\r\n          const accounts = await window.pelagus.request({ method: 'quai_requestAccounts' });\r\n          const transactionParameters = {\r\n              from: accounts[0],             // Адреса користувача\r\n              to: recipientAddress,          // Кінцева адреса\r\n              value: '0x' + weiAmount,       // Кількість токенів у wei\r\n              gasLimit: '0x5208',            // Ліміт газу (21000 в hex)\r\n              gasPrice: '0x3b9aca00'         // Ціна газу в wei (1000000000)\r\n          };\r\n\r\n          const txHash = await window.pelagus.request({\r\n              method: 'quai_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n\r\n          console.log(\"Транзакція надіслана:\", txHash);\r\n          alert(\"Транзакція успішно надіслана. Хеш транзакції: \" + txHash);\r\n      } catch (error) {\r\n          console.error(\"Помилка надсилання транзакції:\", error);\r\n          alert(\"Транзакція не вдалася. Перевірте консоль для деталей.\");\r\n      }\r\n  } else {\r\n      alert(\"Гаманець Pelagus не знайдено.\");\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}