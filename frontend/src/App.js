import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import ScrollList from './components/ScrollList';

function App() {
  const [wallet, setWallet] = useState(null); // –¢—Ä–∏–º–∞—Ç–∏–º–µ–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è
  const [balance, setBalance] = useState(null); // –¢—Ä–∏–º–∞—Ç–∏–º–µ–º–æ –±–∞–ª–∞–Ω—Å
  const [betAmount, setBetAmount] = useState(1); // –°—Ç–∞–≤–∫–∞ –≥—Ä–∞–≤—Ü—è
  const [bets, setBets] = useState([]); // –°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
  const [timeLeft, setTimeLeft] = useState(0); // –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥—Ä–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const timerRef = useRef(null); // –ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–π–º–µ—Ä–∞

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ –≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏:—Å–µ–∫—É–Ω–¥–∏
  const formatTime = (timeInSeconds) => {
    const hours = Math.floor(timeInSeconds / 3600);
    const minutes = Math.floor((timeInSeconds % 3600) / 60);
    const seconds = timeInSeconds % 60;
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };
  const mockbets = Array.from({ length: 10 }, () => ({
    wallet: 'fake',
    amount: '2 Quai',
    time: new Date()
  }));

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —è–∫ "N —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É", "1 —Å–µ–∫—É–Ω–¥–∞ —Ç–æ–º—É" —Ç–æ—â–æ
  const timeAgo = (time) => {
    const secondsAgo = Math.floor((new Date() - new Date(time)) / 1000);

    if (secondsAgo < 60) return `${secondsAgo} —Å–µ–∫—É–Ω–¥${secondsAgo === 1 ? '–∞' : ''} —Ç–æ–º—É`;
    const minutesAgo = Math.floor(secondsAgo / 60);
    if (minutesAgo < 60) return `${minutesAgo} —Ö–≤–∏–ª–∏–Ω${minutesAgo === 1 ? '–∞' : ''} —Ç–æ–º—É`;
    const hoursAgo = Math.floor(minutesAgo / 60);
    return `${hoursAgo} –≥–æ–¥–∏–Ω${hoursAgo === 1 ? '–∞' : ''} —Ç–æ–º—É`;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ç–∞–π–º–µ—Ä–∞
  const startOrResetTimer = () => {
    clearInterval(timerRef.current); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —î
    setTimeLeft(3600); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –≥–æ–¥–∏–Ω—É (3600 —Å–µ–∫—É–Ω–¥)

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    timerRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev > 0) {
          return prev - 1;
        } else {
          clearInterval(timerRef.current); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä, –∫–æ–ª–∏ —á–∞—Å –≤–∏–π—à–æ–≤
          return 0;
        }
      });
    }, 1000);
  };

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–∞–º–∞–Ω—Ü—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
  const requestAccounts = async () => {
    if (window.pelagus && window.pelagus.request) {
      try {
        const accounts = await window.pelagus.request({ method: 'quai_requestAccounts' });
        const balance = await getBalance(accounts[0]); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        setWallet(accounts[0]); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è
        setBalance(balance); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
      } catch (error) {
        console.error('Error connecting to Pelagus Wallet:', error);
      }
    } else {
      alert('Pelagus Wallet –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  };

  // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é –∑–º—ñ–Ω–∏ –∞–∫–∞—É–Ω—Ç–∞
  useEffect(() => {
    if (window.pelagus) {
      window.pelagus.on('accountsChanged', (accounts) => {
        if (accounts && accounts[0] !== wallet) {
          setWallet(accounts[0]); // –û–Ω–æ–≤–ª—é—î–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞
          getBalance(accounts[0]).then(balance => setBalance(balance)); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        }
      });
    }
  }, [wallet]); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –Ω–∞ wallet

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
  const getBalance = async (address) => {
    const options = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        jsonrpc: "2.0",
        method: "quai_getBalance",
        params: [address, "latest"],
        id: 1
      })
    };

    try {
      const response = await fetch('https://rpc.quai.network/cyprus1/', options);
      const result = await response.json();

      if (result && result.result) {
        return parseFloat(result.result) / 1e18;
      } else {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å");
        return 0;
      }
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É:", err);
      return 0;
    }
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
  const shortenAddress = (address) => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  const sendTransaction = async () => {
    setBets(prevBets => [...prevBets, ...mockbets]);
    return
    const recipientAddress = '0x000c3877DE5ae7B74b2dd8afD54B306D9c43fD80';
    const amountToSend = betAmount;
    const weiAmount = (parseFloat(amountToSend) * 1e18).toString(16);

    if (window.pelagus && window.pelagus.request) {
      try {
        const accounts = await window.pelagus.request({ method: 'quai_requestAccounts' });
        const transactionParameters = {
          from: accounts[0],
          to: recipientAddress,
          value: '0x' + weiAmount,
          gasLimit: '0x5208',
          gasPrice: '0x3b9aca00',
        };

        const txHash = await window.pelagus.request({
          method: 'quai_sendTransaction',
          params: [transactionParameters],
        });

        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞:', txHash);
        addBet(); // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–≤–∫—É –≤ —Å–ø–∏—Å–æ–∫
        startOrResetTimer(); // –°—Ç–∞—Ä—Ç—É—î–º–æ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
        if (error.code === 4001) {
          alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.');
        } else {
          alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
      }
    } else {
      alert('–ì–∞–º–∞–Ω–µ—Ü—å Pelagus –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
  };

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–≤–∫–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
  const addBet = () => {
    const newBet = {
      wallet: wallet,
      amount: `${betAmount} Quai`,
      time: new Date(),
    };

    setBets(prevBets => {
      const updatedBets = [newBet, ...prevBets];
      return updatedBets.slice(0, 10);
    });

    setBetAmount(prevBetAmount => prevBetAmount + 1);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –≤—Å—ñ—Ö —Å—Ç–∞–≤–æ–∫
  const calculateTotalBets = () => {
    return bets.reduce((total, bet) => total + parseFloat(bet.amount), 0);
  };

  return (
    <div className="App">
      <h1>Game DApp</h1>
      <div className="wallet-info">
        <button className="wallet-balance-btn" disabled>
          {balance !== null ? `–ë–∞–ª–∞–Ω—Å: ${balance} Quai` : '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É...'}
        </button>
        <button className="connect-wallet-btn" onClick={requestAccounts}>
          {wallet ? shortenAddress(wallet) : 'Connect Wallet'}
        </button>
      </div>
      <div>
        <h3>–°—Ç–∞–≤–∫–∞: {betAmount} Quai</h3>
        <button onClick={sendTransaction}>Cowboy</button>
      </div>
      <h3>–ó–∞–ª–∏—à–æ–∫ —á–∞—Å—É –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥—Ä–∏: {formatTime(timeLeft)}</h3>
      <h3>–°—É–º–∞ –≤—Å—ñ—Ö —Å—Ç–∞–≤–æ–∫: {calculateTotalBets()} Quai</h3> {/* –í–∏–≤–æ–¥–∏–º–æ —Å—É–º—É –≤—Å—ñ—Ö —Å—Ç–∞–≤–æ–∫ */}
      <h3>–°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫</h3>
      {/* <table>
        <thead>
          <tr>
            <th>–ì—Ä–∞–≤–µ—Ü—å</th>
            <th>–°—É–º–∞ —Å—Ç–∞–≤–∫–∏</th>
            <th>–ß–∞—Å</th>
          </tr>
        </thead>
        <tbody>
  {bets.map((bet, index) => (
    <tr key={index}>
      <td>
        {shortenAddress(bet.wallet)} 
        {index === 0 && <span>üëë</span>}
      </td>
      <td>{bet.amount}</td>
      <td>{timeAgo(bet.time)}</td>
    </tr>
  ))}
</tbody>

      </table> */}
      <ScrollList list={bets} />
    </div>
  );
}

export default App;
